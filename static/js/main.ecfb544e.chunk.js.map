{"version":3,"sources":["components/SettingPicker.tsx","components/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","root","width","valuetext","value","SettingsPicker","props","classes","className","Typography","id","gutterBottom","Slider","onChange","handleChange","valueLabelDisplay","aria-labelledby","getAriaValueText","theme","createStyles","minWidth","maxWidth","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","Counter","React","useState","expanded","setExpanded","counter","setCounter","setValue","error","setError","resetCounter","Card","CardContent","variant","color","component","align","CardActions","disableSpacing","Button","onClick","disabled","IconButton","clsx","aria-expanded","aria-label","Collapse","in","timeout","unmountOnExit","event","newValue","console","log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ecfb544e.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles({\n    root: {\n        width: 300,\n    },\n});\n\nfunction valuetext(value: number) {\n    return `${value}Â°C`;\n}\nexport type SettingsPickerPropsType = {\n    value:number[]\n    handleChange:(event: any, newValue: number | number[])=>void\n}\nexport default function SettingsPicker(props:SettingsPickerPropsType) {\n    const classes = useStyles();\n\n\n    return (\n        <div className={classes.root}>\n            <Typography id=\"range-slider\" gutterBottom>\n                Counter range from {props.value[0]} to {props.value[1]}\n            </Typography>\n            <Slider\n                value={props.value}\n                onChange={props.handleChange}\n                valueLabelDisplay=\"off\"\n                aria-labelledby=\"range-slider\"\n                getAriaValueText={valuetext}\n            />\n        </div>\n    );\n}","import React from 'react'\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport SettingsPicker from './SettingPicker';\nimport {Button} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            minWidth:345,\n            maxWidth: 345,\n        },\n        expand: {\n            transform: 'rotate(0deg)',\n            marginLeft: 'auto',\n            transition: theme.transitions.create('transform', {\n                duration: theme.transitions.duration.shortest,\n            }),\n        },\n        expandOpen: {\n            transform: 'rotate(180deg)',\n        },\n    }),\n);\n\nexport default function Counter() {\n    const classes = useStyles();\n    const [expanded, setExpanded] = React.useState(false);\n    const [counter, setCounter] = React.useState(0)\n    const [value, setValue] = React.useState<number[]>([0, 100]);\n    const [error,setError] = React.useState(false)\n    const handleChange = (event: any, newValue: number | number[]) => {\n        setValue(newValue as number[]);\n        console.log(value)\n        setError(true)\n    };\n    const handleExpandClick = () => {\n        setExpanded(!expanded);\n    };\n    const applyNewRange=()=>{\n        setError(true)\n    }\n    const incrementFunction = ()=>{\n        if(value[1] < counter + 1){\n            setError(true)\n        }else{\n            setCounter(counter + 1)\n        }\n    }\n    const resetCounter = () => {\n        setCounter(value[0])\n        setError(false)\n    }\n    return (\n        <Card className={classes.root}>\n            <CardContent>\n                {error ? <Typography variant=\"h6\" color=\"textSecondary\" component=\"h1\" align=\"center\">\n                    <h1>Aplly settings !</h1>\n                </Typography> :<Typography variant=\"h6\" color={counter === value[1] ? 'secondary' : 'primary'} component=\"h1\" align=\"center\">\n                    <h1>{counter}</h1>\n                </Typography>}\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                </Typography>\n            </CardContent>\n            <CardActions disableSpacing>\n                <Button variant=\"outlined\" onClick={incrementFunction} disabled={counter === value[1] || error}>INC</Button>\n                <Button variant=\"outlined\" onClick={resetCounter} disabled={counter === value[0] || error}>RESET</Button>\n                {/*!(counter > value[0]) && error*/}\n                <IconButton\n                    className={clsx(classes.expand, {\n                        [classes.expandOpen]: expanded,\n                    })}\n                    onClick={handleExpandClick}\n                    aria-expanded={expanded}\n                    aria-label=\"show more\"\n                >\n                    <ExpandMoreIcon />\n                </IconButton>\n            </CardActions>\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                <CardContent>\n                    <SettingsPicker value={value} handleChange={handleChange}/>\n                    <Button variant=\"outlined\" onClick={resetCounter} color={!error ? 'primary' : 'secondary'}>Apply range</Button>\n                </CardContent>\n            </Collapse>\n        </Card>\n    );\n}","import React from 'react';\nimport Counter from './components/Counter';\nimport './App.css'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Counter/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}